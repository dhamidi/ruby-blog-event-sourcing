#!/usr/bin/env ruby

require 'sinatra'
require 'blog_es'

use Rack::Static, :urls => ['/css'], :root => 'public'

store = Blog::EventsOnDisk.new('events.json', Blog::JSONSerializer)
publisher = Blog::InMemoryEventPublisher.new
kv = Blog::OnDiskKVStore.new('projections.db')
all_posts = Blog::Projections::Posts.new(kv)
store.replay :all, all_posts
views = Blog::View::Views.new
send_mail_with_sendmail = Blog::Mailer::Sendmail.new
config = Blog::Configuration.new
config.admin = "#{ENV['USER']}@localhost"

comment_notifier = Blog::Services::CommentNotifier.new(
  mailer: send_mail_with_sendmail,
  admin: config.admin,
  posts: all_posts,
  views: views,
)

config.comment_notifier = comment_notifier

publisher.register :all_posts, all_posts

app = Blog::Application.new(
  event_store: store,
  event_publisher: publisher,
  configuration: config,
)

Dir['html/*.html'].sort.each do |filename|
  view_name = filename[%r{html/(.*).html$}, 1]
  contents = File.read(filename)
  views.add view_name.to_sym do
    Blog::View::HTML.new contents
  end
end


class Page
  def initialize(views, title, content)
    @view = views.create :layout
    @title = title
    @content = content
  end

  def render
    @view.display :title, @title
    @view.display :content, @content

    self
  end

  def to_s
    @view.to_s
  end
end

def respond_with_error(error)
  list = '<dl class="errors">%s</dl>'
  items = error.to_h.map do |(field, errors)|
    '<dt>%s</dt><dd>%s</dt>' % [field, errors.join(', ')]
  end

  [422, {}, list % items.join('')]
end

get '/' do
  view = views.create :index
  Blog::Presenter::Index.new(view, all_posts.recent, views).render
  Page.new(views, 'Blog', view).render.to_s
end

get '/admin' do
  view = views.create :admin
  Blog::Presenter::AdminIndex.new(view, all_posts.recent, views).render
  Page.new(views, "Blog | Admin", view).render.to_s
end

get '/admin/actions/write-post' do
  view = views.create :admin_write_post
  Page.new(views, "Blog | Write post", view).render.to_s
end


post '/admin/actions/write-post' do
  action = Blog::Application::WritePost.fill(
    {
      id: params[:id],
      title: params[:title],
      body: params[:body],
    }
  )

  result = app.handle_command(action)
  if result.is_a?(Blog::Errors)
    respond_with_error(result)
  else
    post = all_posts.find(params[:id])
    redirect post.links.rel(:self)
  end
end

post %r{/admin/(posts/[^/]+)/actions/accept-comment} do |post_id|
  post = all_posts.find(post_id)
  action = Blog::Application::AcceptCommentOnPost.fill(
    {
      id: post_id,
      comment_id: params[:comment_id],
    }
  )

  result = app.handle_command(action)
  if result.is_a?(Blog::Errors)
    respond_with_error(result)
  else
    redirect post.links.rel(:pending_comments)
  end
end

post %r{/admin/(posts/[^/]+)/actions/reject-comment} do |post_id|
  post = all_posts.find(post_id)
  action = Blog::Application::RejectCommentOnPost.fill(
    {
      id: post_id,
      comment_id: params[:comment_id],
      reason: '',
    }
  )

  result = app.handle_command(action)
  if result.is_a?(Blog::Errors)
    respond_with_error(result)
  else
    redirect post.links.rel(:pending_comments)
  end
end

get %r{/admin/(posts/[^/]+)/pending-comments} do |post_id|
  post = all_posts.find(post_id)
  view = views.create :post_pending_comments
  Blog::Presenter::PendingComments.new(view, post, views).render
  Page.new(views, "Blog | #{post.title}", view).render.to_s
end

get %r{/admin/(posts/[^/]+)/actions/edit} do |post_id|
  post = all_posts.find(post_id)
  view = views.create :admin_post_edit
  Blog::Presenter::PostEdit.new(view, post).render
  Page.new(views, "Blog | #{post.title}", view).render.to_s
end

post %r{/admin/(posts/[^/]+)/actions/edit} do |post_id|
  action = Blog::Application::EditPost.fill(
    {
      id: post_id,
      title: params[:title],
      body: params[:body],
    }
  )

  result = app.handle_command(action)
  if result.is_a?(Blog::Errors)
    respond_with_error(result)
  else
    post = all_posts.find(post_id)
    redirect post.links.rel(:edit)
  end
end

post %r{/(posts/[^/]+)/actions/comment} do |post_id|
  post = all_posts.find(post_id)
  action = Blog::Application::CommentOnPost.fill(
    {
      id: post_id,
      body: params[:body],
      name: params[:name],
      email: params[:email],
    }
  )

  result = app.handle_command(action)
  if result.is_a?(Blog::Errors)
    respond_with_error(result)
  else
    redirect post.links.rel(:self)
  end
end


get %r{/(posts/[^/]+)} do |post_id|
  view = views.create :post_detail
  post = all_posts.find(post_id)
  Blog::Presenter::PostDetail.new(view, post, views).render
  Page.new(views, "Blog | #{post.title}", view).render.to_s
end
